/* Copyright 2023 Your Name
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include QMK_KEYBOARD_H

// Layer definitions
enum layers {
    _DEFAULT,
    _LOWER,
    _RAISE,
    _ADJUST,
    _GAMING
};

// Custom keycodes
enum custom_keycodes {
    LOWER = SAFE_RANGE,
    RAISE,
    GAMING
};

// Home row mods macros
#define HM_A LGUI_T(KC_A)
#define HM_R LALT_T(KC_R)
#define HM_S LCTL_T(KC_S)
#define HM_T LSFT_T(KC_T)
#define HM_G RSFT_T(KC_G)
#define HM_M RCTL_T(KC_M)
#define HM_N RALT_T(KC_N)
#define HM_E RGUI_T(KC_E)

// Layer switching with tap keys
#define LOWER_DEL LT(_LOWER, KC_DEL)
#define RAISE_SPC LT(_RAISE, KC_SPC)

// Tap dances and combos could be added here

// -------------------- Keymap --------------------
const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {

// Modified 3x6+3 layout with Colemak DH and blank outer columns
// ╭─────┬─────┬─────┬─────┬─────┬─────╮   ╭─────┬─────┬─────┬─────┬─────┬─────╮
// │     │  Q  │  W  │  F  │  P  │  B  │   │  J  │  L  │  U  │  Y  │  ;  │     │
// ├─────┼─────┼─────┼─────┼─────┼─────┤   ├─────┼─────┼─────┼─────┼─────┼─────┤
// │     │  A  │  R  │  S  │  T  │  G  │   │  M  │  N  │  E  │  I  │  O  │     │
// ├─────┼─────┼─────┼─────┼─────┼─────┤   ├─────┼─────┼─────┼─────┼─────┼─────┤
// │     │  Z  │  X  │  C  │  D  │  V  │   │  K  │  H  │  ,  │  .  │  /  │     │
// ╰─────┴─────┴─────┴─────┼─────┼─────┤   ├─────┼─────┼─────┴─────┴─────┴─────╯
//                         │ ESC │ TAB │   │ ENT │BSPC │
//                         │     │     │   │     │     │
//                         │     │LOWER│   │RAISE│     │
//                         ╰─────┴─────╯   ╰─────┴─────╯

[_DEFAULT] = LAYOUT_split_3x6_3(
    KC_NO,  KC_Q,    KC_W,    KC_F,    KC_P,    KC_B,         KC_J,    KC_L,    KC_U,    KC_Y,    KC_SCLN, KC_NO,
    KC_NO,  HM_A,    HM_R,    HM_S,    HM_T,    HM_G,         HM_M,    HM_N,    HM_E,    KC_I,    KC_O,    KC_NO,
    KC_NO,  KC_Z,    KC_X,    KC_C,    KC_D,    KC_V,         KC_K,    KC_H,    KC_COMM, KC_DOT,  KC_SLSH, KC_NO,
                                    KC_ESC, KC_TAB, LOWER_DEL, RAISE_SPC, KC_ENT, KC_BSPC
),

// Lower layer
[_LOWER] = LAYOUT_split_3x6_3(
    KC_NO,  KC_1,    KC_2,    KC_3,    KC_4,    KC_5,         KC_6,    KC_7,    KC_8,    KC_9,    KC_0,    KC_NO,
    KC_NO,  KC_EXLM, KC_AT,   KC_HASH, KC_DLR,  KC_PERC,      KC_CIRC, KC_AMPR, KC_ASTR, KC_LPRN, KC_RPRN, KC_NO,
    KC_NO,  KC_TILD, KC_GRV,  KC_BSLS, KC_PIPE, KC_LCBR,      KC_RCBR, KC_SCLN, KC_COLN, KC_MINS, KC_EQL,  KC_NO,
                                    TO(_DEFAULT), _______, _______, MO(_ADJUST), _______, _______
),

// Raise layer
[_RAISE] = LAYOUT_split_3x6_3(
    KC_NO,  KC_9,    KC_0,    KC_MINS, KC_EQL,  KC_HOME,      KC_PGDN, KC_PGUP, KC_END,  KC_BSLS, KC_DEL,  KC_NO,
    KC_NO,  KC_LBRC, KC_RBRC, KC_LCBR, KC_RCBR, KC_LEFT,      KC_DOWN, KC_UP,   KC_RGHT, KC_QUOT, KC_GRV,  KC_NO,
    KC_NO,  KC_QUOT, KC_DQUO, KC_UNDS, KC_PLUS, KC_COMM,      KC_DOT,  KC_SLSH, KC_QUES, KC_PIPE, KC_BSLS, KC_NO,
                                    TO(_DEFAULT), _______, _______, _______, _______, _______
),

// Adjust layer
[_ADJUST] = LAYOUT_split_3x6_3(
    KC_NO,  KC_F1,   KC_F2,   KC_F3,   KC_F4,   KC_F5,        KC_F6,   KC_F7,   KC_F8,   KC_F9,   KC_F10,  KC_NO,
    KC_NO,  KC_F11,  KC_F10,  KC_F11,  KC_F12,  KC_DEL,       RESET,   DEBUG,   KC_CAPS, KC_INS,  KC_PSCR, KC_NO,
    KC_NO,  KC_LSFT, KC_LCTL, KC_LALT, KC_LGUI, TO(_GAMING),  KC_MUTE, KC_MPLY, KC_P,    KC_MPRV, KC_MNXT, KC_NO,
                                    TO(_DEFAULT), _______, _______, _______, _______, _______
),

// Gaming layer - Optimized for WASD and common gaming controls
// Switched to QWERTY-based layout for familiar gaming positions
// ╭─────┬─────┬─────┬─────┬─────┬─────╮   ╭─────┬─────┬─────┬─────┬─────┬─────╮
// │     │ ESC │  Q  │  W  │  E  │  R  │   │  T  │  Y  │  U  │  I  │  O  │     │
// ├─────┼─────┼─────┼─────┼─────┼─────┤   ├─────┼─────┼─────┼─────┼─────┼─────┤
// │     │SHIFT│  A  │  S  │  D  │  F  │   │  G  │  H  │  J  │  K  │  L  │     │
// ├─────┼─────┼─────┼─────┼─────┼─────┤   ├─────┼─────┼─────┼─────┼─────┼─────┤
// │     │CTRL │  Z  │  X  │  C  │  V  │   │  B  │  N  │  M  │  ,  │  .  │     │
// ╰─────┴─────┴─────┴─────┼─────┼─────┤   ├─────┼─────┼─────┴─────┴─────┴─────╯
//                         │TO_DF│ TAB │   │ ALT │ ENT │
//                         │     │     │   │     │     │
//                         │     │SPACE│   │TO_DF│     │
//                         ╰─────┴─────╯   ╰─────┴─────╯

[_GAMING] = LAYOUT_split_3x6_3(
    KC_NO,  KC_ESC,  KC_Q,    KC_W,    KC_E,    KC_R,         KC_T,    KC_Y,    KC_U,    KC_I,    KC_O,    KC_NO,
    KC_NO,  KC_LSFT, KC_A,    KC_S,    KC_D,    KC_F,         KC_G,    KC_H,    KC_J,    KC_K,    KC_L,    KC_NO,
    KC_NO,  KC_LCTL, KC_Z,    KC_X,    KC_C,    KC_V,         KC_B,    KC_N,    KC_M,    KC_COMM, KC_DOT,  KC_NO,
                                    TO(_DEFAULT), KC_TAB, KC_SPC, KC_LALT, KC_ENT, TO(_DEFAULT)
)
};

// -------------------- Additional code --------------------

// Layer state change function
layer_state_t layer_state_set_user(layer_state_t state) {
    // Auto enable _ADJUST layer when both _LOWER and _RAISE are active
    return update_tri_layer_state(state, _LOWER, _RAISE, _ADJUST);
}

// Process custom keycodes
bool process_record_user(uint16_t keycode, keyrecord_t *record) {
    switch (keycode) {
    case LOWER:
        if (record->event.pressed) {
            layer_on(_LOWER);
        } else {
            layer_off(_LOWER);
        }
        return false;
    case RAISE:
        if (record->event.pressed) {
            layer_on(_RAISE);
        } else {
            layer_off(_RAISE);
        }
        return false;
    case GAMING:
        if (record->event.pressed) {
            layer_on(_GAMING);
        } else {
            layer_off(_GAMING);
        }
        return false;
    }
    return true;
}

// Optional: Add combo to quickly enter gaming mode
#ifdef COMBO_ENABLE
enum combo_events {
    COMBO_GAMING,
};

const uint16_t PROGMEM gaming_combo[] = {KC_Z, KC_M, COMBO_END};

combo_t key_combos[] = {
    [COMBO_GAMING] = COMBO(gaming_combo, TO(_GAMING)),
};
#endif

// Optional: Add additional customizations below